@{
    var userName = Session["UserName"] as string ?? "Guest";
    var userId = Session["UserID"] as string ?? "";
    var role = Session["Role"] as string ?? "";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewBag.Title - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body { padding-top: 56px; }
        .content-area { margin: 0; padding-top: 1rem; }
        @@media (max-width: 767px) { .content-area { margin: 0; } }
        /* Ensure table buttons are always visible */
        .table td .btn, .table th .btn {
            display: inline-block !important;
            visibility: visible !important;
            opacity: 1 !important;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-dark fixed-top navbar-expand-lg">
        <div class="container-fluid">
            <a class="navbar-brand" href="@Url.Action("Login","Auth")" title="Go to Login">MyBank Dashboard</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#dashNavbar" aria-controls="dashNavbar" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="dashNavbar">
                <ul class="navbar-nav me-auto">
                    @if (role == "CUSTOMER")
                    {
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Dashboard","Customer")">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("OpenAccount","Customer")">Open Account</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Transfer","Customer")">Transfer</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Transactions","Customer")">Transactions</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Settings","Customer")">Settings</a></li>
                    }
                    else if (role == "EMPLOYEE")
                    {
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Index","Employee")">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Dashboard","SavingEmployee")">Savings Desk</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Dashboard","LoanEmployee")">Loan Desk</a></li>
                    }
                    else if (role == "MANAGER")
                    {
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Dashboard","Manager")">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("OpenAccount","Manager")">Open Account</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("ViewAccounts","Manager")">View Accounts</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("PendingRequests","Manager")">Pending</a></li>
                    }
                </ul>
                <div class="d-flex align-items-center text-white">
                    <div class="me-3 text-end">
                        <div><strong>@userName</strong></div>
                        <div class="small">
                            @userId
                            @if (!string.IsNullOrWhiteSpace(role)) { @Html.Raw("&nbsp;&bull;&nbsp;"); @role }
                        </div>
                    </div>
                    @using (Html.BeginForm("Logout", "Auth", FormMethod.Post, new { @class = "m-0" }))
                    {
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-outline-light btn-sm">Logout</button>
                    }
                </div>
            </div>
        </div>
    </nav>

    <main class="content-area container">
        @Html.Partial("_Alerts")
        @RenderBody()
    </main>

    <footer class="text-center mt-4">
        <div class="small text-muted">&copy; @DateTime.Now.Year - MyBank</div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    @RenderSection("Scripts", required: false)

    <script>
        // Global client-side error handler to show errors as Bootstrap alerts on dashboard pages
        (function () {
            function showClientError(message, source, lineno, colno, error) {
                try {
                    var container = document.getElementById('client-error-container');
                    if (!container) {
                        container = document.createElement('div');
                        container.id = 'client-error-container';
                        container.className = 'container position-fixed top-0 start-50 translate-middle-x mt-3';
                        container.style.zIndex = 1080;
                        document.body.appendChild(container);
                    }

                    var alert = document.createElement('div');
                    alert.className = 'alert alert-danger alert-dismissible fade show shadow';
                    var title = 'An error occurred';
                    var detail = message || (error && (error.message || error.toString())) || 'Unknown error';
                    var location = source ? ('\nSource: ' + source + (lineno ? ':' + lineno : '') + (colno ? ':' + colno : '')) : '';
                    alert.innerHTML = '<strong>' + title + ':</strong> ' + detail + '<pre class="mb-0 small">' + (location) + '</pre>' +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
                    container.appendChild(alert);
                } catch (e) { /* ignore */ }
            }

            window.addEventListener('error', function (e) {
                showClientError(e.message, e.filename, e.lineno, e.colno, e.error);
            });

            window.addEventListener('unhandledrejection', function (e) {
                var reason = e && e.reason;
                var message = (reason && (reason.message || reason.toString())) || 'Unhandled promise rejection';
                showClientError(message, null, null, null, reason);
            });
        })();
    </script>
</body>
</html>