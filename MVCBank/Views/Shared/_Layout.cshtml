<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <header class="bg-primary text-white text-center p-3">
        <h1 class="m-0"><a href="@Url.Action("Login","Auth")" class="text-white text-decoration-none">MVCBank</a></h1>
    </header>

    @{ var role = Session["Role"] as string ?? string.Empty; var isLoggedIn = Session["UserID"] != null; }

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark px-3">
        <a class="navbar-brand" href="@Url.Action("Login","Auth")" title="Go to Login">🏦</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNavbar" aria-controls="mainNavbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="mainNavbar">
            <ul class="navbar-nav me-auto">
                @if (!isLoggedIn)
                {
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Login", "Auth")">Login</a></li>
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Register", "Auth")">Register</a></li>
                }
                @if (role == "CUSTOMER")
                {
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Dashboard", "Customer")">Dashboard</a></li>
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("OpenAccount", "Customer")">Open Account</a></li>
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Transfer", "Customer")">Transfer</a></li>
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Transactions", "Customer")">Transactions</a></li>
                }
                @if (role == "EMPLOYEE")
                {
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Index", "Employee")">Employee</a></li>
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Index", "SavingEmployee")">Savings Desk</a></li>
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Index", "LoanEmployee")">Loan Desk</a></li>
                }
                @if (role == "MANAGER")
                {
                    <li class="nav-item"><a class="nav-link" href="@Url.Action("Dashboard", "Manager")">Manager</a></li>
                }
            </ul>
            @if (isLoggedIn)
            {
                using (Html.BeginForm("Logout", "Auth", FormMethod.Post, new { @class = "d-flex mb-0" }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-outline-light btn-sm">Logout</button>
                }
            }
        </div>
    </nav>

    <main class="container mt-4">
        @Html.Partial("_Alerts")
        @RenderBody()
    </main>

    <footer class="bg-light text-center p-3 mt-4">
        <p>&copy; @DateTime.Now.Year - MyBank</p>
    </footer>

    @RenderSection("Scripts", required: false)

    <script>
        // Global client-side error handler to show errors as Bootstrap alerts
        (function () {
            function showClientError(message, source, lineno, colno, error) {
                try {
                    var container = document.getElementById('client-error-container');
                    if (!container) {
                        container = document.createElement('div');
                        container.id = 'client-error-container';
                        container.className = 'container position-fixed top-0 start-50 translate-middle-x mt-3';
                        container.style.zIndex = 1080;
                        document.body.appendChild(container);
                    }

                    var alert = document.createElement('div');
                    alert.className = 'alert alert-danger alert-dismissible fade show shadow';
                    var title = 'An error occurred';
                    var detail = message || (error && (error.message || error.toString())) || 'Unknown error';
                    var location = source ? ('\nSource: ' + source + (lineno ? ':' + lineno : '') + (colno ? ':' + colno : '')) : '';
                    alert.innerHTML = '<strong>' + title + ':</strong> ' + detail + '<pre class="mb-0 small">' + (location) + '</pre>' +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
                    container.appendChild(alert);
                } catch (e) { /* ignore */ }
            }

            window.addEventListener('error', function (e) {
                // Ignore script loading errors silently to avoid duplicate network noise
                showClientError(e.message, e.filename, e.lineno, e.colno, e.error);
            });

            window.addEventListener('unhandledrejection', function (e) {
                var reason = e && e.reason;
                var message = (reason && (reason.message || reason.toString())) || 'Unhandled promise rejection';
                showClientError(message, null, null, null, reason);
            });
        })();
    </script>
</body>
</html>
